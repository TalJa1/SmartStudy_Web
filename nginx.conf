# This is the main Nginx configuration file for a Vite + React application.
# It addresses common issues like MIME types for module scripts and
# enables client-side routing, compression, and caching.

# User and Worker Processes
# It's recommended to run Nginx as a non-root user for security.
# worker_processes auto; # Use 'auto' to let Nginx determine the optimal number

# Error Log
# error_log /var/log/nginx/error.log warn; # Uncomment and adjust path as needed

# PID File
# pid /var/run/nginx.pid; # Uncomment and adjust path as needed

# Events Block: Configures connection processing
events {
    # worker_connections 1024; # Max number of simultaneous connections per worker process
    # multi_accept on; # Uncomment to accept as many new connections as possible
}

# HTTP Block: Contains server configurations
http {
    # Include the standard MIME types file. This is CRUCIAL for correct
    # Content-Type headers, especially for JavaScript modules.
    # Ensure this file (e.g., /etc/nginx/mime.types) contains:
    # application/javascript  js mjs;
    # text/javascript         js;
    include       mime.types;

    # Default MIME type for files whose type cannot be determined.
    # It's good to keep this, but the 'include mime.types' should handle most cases.
    default_type  application/octet-stream;

    # Log Format
    # log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                   '$status $body_bytes_sent "$http_referer" '
    #                   '"$http_user_agent" "$http_x_forwarded_for"';

    # Access Log
    # access_log  /var/log/nginx/access.log  main; # Uncomment and adjust path as needed

    # Sendfile improves performance by copying data directly between file descriptors.
    sendfile        on;
    # tcp_nopush     on; # Uncomment to send response headers and the beginning of the file in one packet

    # Keepalive Timeout
    # keepalive_timeout  65; # Timeout for keep-alive connections

    # Gzip Compression: Reduces file sizes for faster transfer.
    # This is highly recommended for web applications.
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6; # Compression level (1-9, 6 is a good balance)
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml; # Add other types if needed

    # Server Block: Defines a virtual server
    server {
        listen 80; # Listen on port 80 for HTTP traffic
        server_name localhost; # Replace with your domain name (e.g., example.com)

        # Root directory for your Vite build output (e.g., 'dist' folder).
        # Adjust this path to where your built React app files are located.
        root /usr/share/nginx/html;

        # Default index file to serve when a directory is requested.
        index index.html index.htm;

        # Location Block for handling all requests
        location / {
            # This is crucial for single-page applications (SPAs) like React.
            # It tries to serve the requested URI, then the URI as a directory,
            # and if neither is found, it falls back to index.html.
            # This ensures client-side routing (e.g., /about, /dashboard) works.
            try_files $uri $uri/ /index.html;

            # Optional: Add caching headers for static assets (CSS, JS, images).
            # This tells browsers to cache these files for a longer period.
            # You might want to fine-tune these based on your deployment strategy.
            expires 1y; # Cache for 1 year
            add_header Cache-Control "public, must-revalidate, proxy-revalidate";
        }

        # Optional: Location block for specific JavaScript files if default_type or mime.types is problematic
        # This is usually not needed if mime.types is correct, but can be a fallback.
        # location ~ \.js$ {
        #     add_header Content-Type application/javascript;
        # }

        # Optional: Allow larger uploads if your application handles file uploads.
        # Adjust the size (e.g., 20M for 20 megabytes) as per your needs.
        client_max_body_size 20M;

        # Optional: Error pages
        # error_page 404 /404.html;
        # location = /404.html {
        #     internal;
        # }
        # error_page 500 502 503 504 /50x.html;
        # location = /50x.html {
        #     internal;
        # }
    }

    # You can define multiple server blocks for different domains or subdomains.
    # server {
    #     listen 443 ssl;
    #     server_name your_domain.com;
    #     # ... SSL configuration ...
    # }
}
